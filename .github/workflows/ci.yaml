name: ci

on:
  push:
    branches: [main]
  
  workflow_dispatch:
    
jobs:

  build:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    env:
      # AZURE_FUNCTIONAPP_NAME: your-app-name  # set this to your application's name
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/Propt.Accounts.Functions'    # set this to the path to your web app project, defaults to the repository root
      DOTNET_VERSION: '5.x' 

    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        popd

    # - name: 'Run Azure Functions Action'
    #   uses: Azure/functions-action@v1
    #   id: fa
    #   with:
    #     app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
    #     package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
    #     publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}


  terraform-test:
    name: 'Terraform - Test'
    runs-on: 'ubuntu-latest'
    environment: test
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_ACTIONS_WORKING_DIR: './terraform'

    defaults:
      run:
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var environment="test" -no-color -out tfplan

      - name: Terraform Apply
        id: Apply
        run: terraform apply -no-color -auto-approve -input=false tfplan

      - name: 'Terraform Output'
        id: terraform
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 'latest'
          tf_actions_subcommand: 'output'
          tf_actions_working_dir: ${{ env.TF_ACTIONS_WORKING_DIR }}


      # - name: Get Publish Profile
      #   id: getPublishProfile
      #   run: |
      #     echo "::set-output name=PUBLISH_PROFILE::$(az webapp deployment list-publishing-profiles -g 'resource-group-name' -n 'app-service-name' --xml)"
        



  terraform-live:
    name: 'Terraform - Live'
    runs-on: 'ubuntu-latest'
    needs: [terraform-test, build]
    environment: live
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_ACTIONS_WORKING_DIR: './terraform'

    defaults:
      run:
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="resource_group_name=propt-tf-live-rg-ukso" -backend-config="storage_account_name=propttflivesaukso"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var environment="live" -no-color -out tfplan

      - name: Terraform Apply
        id: Apply
        run: terraform apply -no-color -auto-approve -input=false tfplan